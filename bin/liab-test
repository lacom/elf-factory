#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var prompt = require('prompt');
var exec = require('child_process').exec;
var path = require('path');
var util = require('../lib/utilities.js')
var config = require('../config')();


// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = util.exit;


program.parse(process.argv);

// The index of the test keys to use
var testIndex = (program.args.length > 0) ? (parseInt(program.args[0]) - 1) : 0;


// Require the main interaction script
var script = require(process.cwd() + '/index.js');
var tests = require(process.cwd() + '/test.json');

// Set the test keys
if (tests.keys.length > 0 && testIndex <= tests.keys.length) {
	var testKeys = tests.keys[testIndex];
} else {
	var testKeys = {};
}

// Set the test event
var testEvent = {
	bot  : tests.bot,
	keys : testKeys
}
	
var testContext = {
	done: function() {
		console.log('Done.');
	},

	succeed: function(res) {
		console.log(`\r\nTest ${testIndex + 1} returned:\r\n`);
		console.log(res);
	},

	error: function(err) {
		console.log(err);
	}
}


var testCallback = function(err, res) {
	console.log(`\r\nTest ${testIndex + 1} returned:\r\n`);
	if (err) console.log(err);
	else console.log(res);
}


// Prompt for empty key values, if any
var emptyKeys = [];
for (var keyName in testEvent.keys) {
	if (!testEvent.keys[keyName]) emptyKeys.push(keyName);
}

prompt.message = "Enter a value for";
prompt.start();
prompt.get(emptyKeys, function (err, res) {
	if (err) throw err;

	Object.assign(testEvent.keys, res);

	// Start timer
	var startTime = new Date();

	// Run the handler method of the interaction script
	Promise.resolve(script.handler(testEvent, testContext, testCallback)).then(() => {
		var endTime = new Date();
		var timeDiff = (endTime - startTime);
		timeDiff /= 1000;
		console.log('\r\nCompleted in ' + timeDiff + ' seconds.');
		console.log('Type "' + config.APP_NAME + ' upload" when you\'re ready to upload your node to ' + config.APP_NAME + '.');
		util.exit(1);
	});
});
