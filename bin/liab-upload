#!/usr/bin/env node

/**
 * TODO
 *   - exclude .env file from dist package
 */

var program = require('commander');
var fs = require('fs');
var del = require('del');
var netrc = require('node-netrc');
var gulp = require('gulp');
var config = require('../config')();
var install = require('gulp-install');
var zip = require('gulp-zip');
var request = require('request');
var runSequence = require('run-sequence');
var path = require('path');
var pkg = require(path.join(process.cwd(), 'package.json'));
var util = require('../lib/utilities');


/**
 * Loads config vars as set in the project's config.json file.
 * devConfig.json will contain development vars not intended for version control/production.
 */
var projectConfig = require(path.join(process.cwd(), 'config.json'));
var devConfig = require(path.join(process.cwd(), 'devConfig.json'));


// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = util.exit;


// Parse the command for args and flags
program
	.option('-e, --environment <type>', 'If set to DEV, request goes to localhost.')
	.parse(process.argv);


// Set environment
var env = program.environment ? program.environment.toLowerCase() : '';
var PORT = 3000;

if (env === 'dev' || env === 'development') {
	var HOST = 'localhost:' + PORT;
	var APP_URL = 'http://localhost:' + PORT + '/' + config.API_MAJOR_VERSION;
	var NODE_ID = devConfig.dev_id ? devConfig.dev_id : null;
} else {
	var HOST = config.HOST;
	var APP_URL = 'https://' + HOST + '/' + config.API_MAJOR_VERSION;
	var NODE_ID = projectConfig.id ? projectConfig.id : null;
}


gulp.task('clean', function(cb) {
	console.log('Cleaning dist files...');
  return del('./dist/*',
    del('./dist.zip', cb)
  );
});
 

gulp.task('js', function() {
	console.log('Creating new dist files...');
  return gulp.src(['index.js', 'package.json', 'config.json'])
    .pipe(gulp.dest('dist/'))
});

gulp.task('lib', function() {
	console.log('Creating new lib files for dist...');
  return gulp.src(['lib/*'])
    .pipe(gulp.dest('dist/lib/'))
});
 

gulp.task('npm', function() {
	console.log('Installing dependencies...');
  return gulp.src('./package.json')
    .pipe(gulp.dest('./dist/'))
    .pipe(install({ production: true }));
});
 

gulp.task('zip', function() {
	console.log('Zipping dist files...');
  return gulp.src(['dist/**/*', 'dist/.*'])
    .pipe(zip('dist.zip'))
    .pipe(gulp.dest('./'));
});
 

gulp.task('upload', function() {
	console.log('Uploading...');
	var data = {
		'index' : fs.createReadStream('./index.js'),
		'dist'	: fs.createReadStream('./dist.zip')
	};
	if (pkg.repository && pkg.repository.url) data.repo_url = pkg.repository.url;
	var auth = netrc(HOST);
	return request.post({
		'url' 			: APP_URL + '/nodes/' + NODE_ID + '/upload',
		'formData' 	: data,
		'auth'			: { 'bearer' : auth.password }
	}, function (err, res, body) {
		if (err) { console.log(err); }
		else if (JSON.parse(body).id) console.log('\r\n' + 'Woo! Node was uploaded successfully.'); 
    else console.log('\r\n' + 'Hmm...something was funky on that upload. Status code: ' + res.statusCode); 
	});
});

gulp.task('update',function(){
	console.log('Updating node with configuration in config.json...')
	var data = {};
  if (projectConfig.description) data.description = projectConfig.description;
  if (projectConfig.expressions) data.expressions = projectConfig.expressions;
  if (projectConfig.domain) data.domain = projectConfig.domain;
  if (projectConfig.keys) data.keys = projectConfig.keys;
	if (pkg.repository && pkg.repository.url) data.repo_url = pkg.repository.url;
	var auth = netrc(HOST);
	return request.post({
		'url': APP_URL + '/nodes/' + NODE_ID,
		'auth': { 'bearer' : auth.password },
		'json': true,
		'body' : data
	}, function (err, res, body) {
		if (err) { console.log("\n\nYour node was uploaded, but something went wrong updating its configuration.\nMake sure you config.json keys are properly formatted.\n" + err); }
	});

})

gulp.task('tasks', function(callback) {
  return runSequence(
    ['clean'],
    ['js', 'lib', 'npm'],
    ['zip'],
    ['upload'],
    ['update'],
    callback);
});


// Run the gulp tasks
gulp.start('tasks', function(err, res) {
	if (err) { console.log(err); } 
	util.exit(1);
});