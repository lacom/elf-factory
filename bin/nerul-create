#!/usr/bin/env node

var program = require('commander');
var path = require('path');
var request = require('request');
var netrc = require('node-netrc');
var config = require('../config')();
var pkg = require('../package.json');
var util = require('../lib/utilities')

var SITE_URL = config.SITE_URL;
var SITE_DOMAIN = config.SITE_DOMAIN;


// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = util.exit;


// Parse the command for args and flags
program
  .option('-e, --environment <type>', 'Used for development of this CLI tool.')
  .parse(process.argv);


// Get the submitted interaction name
if (program.args.length > 0) {
	var name = program.args[0];
} else {
	console.log('You need to supply a name for your interaction. Type "nerul" for help.');
	util.exit(1);
}


// Check if the environment flag was used
var env = program.environment ? program.environment : '';


// Create a new interaction
newInteraction(name, env);


if (!util.exit.exited) {
	if(!program.args.length) {
    program.help();
  }
}


/**
 * New Interaction
 * Checks for existence and if it doesn't exist creates the interaction
 */
function newInteraction(nameDisplay, env) {

	var siteUrl = (env == 'development') ? 'http://localhost:3000' : SITE_URL;
	var siteDomain = (env == 'development') ? 'localhost:3000' : SITE_DOMAIN;


	// Get auth creds from netrc file
	var auth = netrc(siteDomain);


	// Create function
	request.post(siteUrl + '/api/v1/n/', {
	  auth: {
    	'user': auth.login,
    	'pass':  auth.password,
    	'sendImmediately': true
	  },
	  form: { name_display: nameDisplay }
	}, function(err, res, body) {
		if (err) { 
			console.log(auth);
			console.log(err);
			console.log('Nerul could not be reached, aborting.');
			util.exit(1);
		}
		if (body == 'Unauthorized') {
			console.log('Please add your auth credentials to your .netrc file first.');
			util.exit(1);
		} else if (body != 'success') {
			console.log(body);
			util.exit(1);
		} else {
			// Path
			var nameSlug = util.slugify(nameDisplay);
		  var destinationPath = nameSlug || '.';

		  // Interaction name placed onto server
		  var interactionName = path.basename(path.resolve(destinationPath));

		  // Generate interaction in local filesystem
		  util.emptyDirectory(destinationPath, function (empty) {
		    if (empty || program.force) {
		      createInteraction(interactionName, destinationPath);
		    } else {
		      util.confirm('destination is not empty, continue? [y/N] ', function (ok) {
		        if (ok) {
		          process.stdin.destroy();
		          createInteraction(interactionName, destinationPath);
		        } else {
		          console.error('aborting');
		          util.exit(1);
		        }
		      });
		    }
		  });
		}
	});
}


/**
 * Create interaction at the given directory `path`. 
 *
 * @param {String} path
 */
function createInteraction(interactionName, path) {

  var wait = 5;

  console.log();

  function complete() {
    if (--wait) return;
    var prompt = util.launchedFromCmd() ? '>' : '$';

    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, path);
    console.log();
    console.log('   run the app:');

    if (util.launchedFromCmd()) {
      console.log('     %s SET DEBUG=%s:* & npm start', prompt, interactionName);
    } else {
      console.log('     %s DEBUG=%s:* npm start', prompt, interactionName);
    }
    console.log();
  }


  // JavaScript
  var index  = util.loadTemplate('index.js');

  // env config file
  var dotenv = (env && env == 'development') ? 'NODE_ENV=development\r\nSITE_URL=http://localhost:3000\r\nSITE_DOMAIN=localhost:3000' : 'NODE_ENV=development';

	util.mkdir(path, function() {

	  // package.json
	  var pkg = {
	    name : interactionName,
	    version : '0.0.0',
	    description : '',
	    main : 'index.js',
	    author : '',
	    license : '',
	    private : true,
	    scripts : { test: 'echo \"Error: no test specified\" && exit 1' },
	    dependencies : {"dotenv": "^1.2.0"},
	  };

	  // write files
	  util.write(path + '/package.json', JSON.stringify(pkg, null, 2));
	  util.write(path + '/index.js', index);
	  util.write(path + '/.env', dotenv);

	  complete();
	});
}
