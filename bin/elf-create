#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var readline = require('readline');
var request = require('request');
var netrc = require('node-netrc');
var Config = require('../config');
var pkg = require('../package.json');
var util = require('../lib/utilities.js')

var _exit = process.exit;
// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit;

var SITE_URL = config.SITE_URL;
var SITE_DOMAIN = config.SITE_DOMAIN;

var siteUrl = (env && env == 'development') ? 'http://localhost:3000' : SITE_URL;
var siteDomain = (env && env == 'development') ? 'localhost:3000' : SITE_DOMAIN;

var interactionName = interaction;
console.log(interactionName);
interactionName = util.slugify(interactionName);

var auth = netrc(siteDomain);

program
  .description('=> creates a new interaction with the specified name')
  .option('-e, --environment <type>', 'Used for development of this CLI tool.')
  //.option('-d --domain <domainName>', 'Used to specify domain, if not specified, part of global domain.');
  .action(function(name, args) {
  	if (name) {
  		var env = args.environment ? args.environment : '';
  		newInteraction(name, env);
  	} else {
  		console.error('You need to supply a name for your interaction. Type "elf" for help.');
      	util.exit(1);
  	//}if (domainName){
  		//TODO TODO TODO
   // }
  });

/**
 * New Interaction
 * Checks for existence and 
 */
  function newInteraction(cmdName, env) {
	var siteUrl = (env && env == 'development') ? 'http://localhost:3000' : SITE_URL;
	var siteDomain = (env && env == 'development') ? 'localhost:3000' : SITE_DOMAIN;
	var auth = netrc(siteDomain);

	// Create function
	request.post(siteUrl + '/api/v1/i/', {
	  auth: {
    	'user': auth.login,
    	'pass':  auth.password,
    	'sendImmediately': true
	  },
	  form: { name_display: cmdName }
	}, function(err, res, body) {
		if (err) { 
			console.log('Elf could not be reached, aborting.');
			util.exit(1);
		}
		if (body == 'Unauthorized') {
			console.log('Please add your auth credentials to your .netrc file first.');
			util.exit(1);
		} else if (body != 'success') {
			console.log(body);
			util.exit(1);
		} else {
			// Path
			cmdName = slugify(cmdName);
		  var destinationPath = cmdName || '.';

		  // Interaction name placed onto server
		  var interactionName = path.basename(path.resolve(destinationPath));

		  // Generate interaction on server
		  util.emptyDirectory(destinationPath, function (empty) {
		    if (empty || program.force) {
		      createInteraction(interactionName, destinationPath);
		    } else {
		      confirm('destination is not empty, continue? [y/N] ', function (ok) {
		        if (ok) {
		          process.stdin.destroy();
		          createInteraction(interactionName, destinationPath);
		        } else {
		          console.error('aborting');
		          util.exit(1);
		        }
		      });
		    }
		  });
		}
	});
}

/**
 * New Domain
 */

function newDomain(dmnName){
  var auth = netrc(SITE_DOMAIN);

 request.post(SITE_URL + '/api/v1/d/', {
    auth: {
      'user' : auth.login,
      'pass' : auth.password,
      'sendImmediately' : true
    },
  form: { name_display: dmnName }
  }, function(err, res, body){
    if (err) {
      console.log("Elf could not be reached, aborting");
      util.exit(1);
    } else if (body != 'Unauthorized'){
      console.log('Please add your auth credentials to your .netrc file first.');
      util.exit(1);
    } else if (body != success){
      console.log('Domain name has been taken. Perhaps take a look as to whether the existing domain meets your needs.');
     util.exit(1);
    } else {
      //TODO TODO TODO
          });
        }
      });
    }
  });
}

/**
 * Create interaction at the given directory `path`. 
 *
 * @param {String} path
 */


function createInteraction(app_name, path) {

  var wait = 5;

  console.log();

  function complete() {
    if (--wait) return;
    var prompt = launchedFromCmd() ? '>' : '$';

    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, path);
    console.log();
    console.log('   run the app:');

    if (launchedFromCmd()) {
      console.log('     %s SET DEBUG=%s:* & npm start', prompt, app_name);
    } else {
      console.log('     %s DEBUG=%s:* npm start', prompt, app_name);
    }
    console.log();
  }

  // JavaScript
  var index  = loadTemplate('index.js');
  var dotenv = (env && env == 'development') ? 'NODE_ENV=development\r\nSITE_URL=http://localhost:3000\r\nSITE_DOMAIN=localhost:3000' : 'NODE_ENV=development';

	util.mkdir(path, function() {

	  // package.json
	  var pkg = {
	    name : app_name,
	    version : '0.0.0',
	    description : '',
	    main : 'index.js',
	    author : '',
	    license : '',
	    private : true,
	    scripts : { test: 'echo \"Error: no test specified\" && exit 1' },
	    dependencies : {"dotenv": "^1.2.0"},
	  };

	  // write files
	  util.write(path + '/package.json', JSON.stringify(pkg, null, 2));
	  util.write(path + '/index.js', index);
	  util.write(path + '/.env', dotenv);

	  complete();
	});
}

function createDomain(domain_name, path) {
	var wait = 5;
	console.log();
	function complete() {
    if (--wait) return;
    var prompt = launchedFromCmd() ? '>' : '$';

    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, path);
    console.log();
    console.log('   run the app:');

    if (launchedFromCmd()) {
      console.log('     %s SET DEBUG=%s:* & npm start', prompt, app_name);
    } else {
      console.log('     %s DEBUG=%s:* npm start', prompt, app_name);
    }
    console.log();
  }

	  // TODO TODO TODO

}

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
  return process.platform === 'win32'
    && process.env._ === undefined;
}

/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}


/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}