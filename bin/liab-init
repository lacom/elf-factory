#!/usr/bin/env node

var program = require('commander');
var path = require('path');
var request = require('request');
var netrc = require('node-netrc');
var fs = require('fs');
var config = require('../config')();
var pkg = require(path.join(process.cwd(), 'package.json'));
var util = require('../lib/utilities');


/**
 * Loads config vars as set in the project's config.json file.
 */
var projectConfig = require(path.join(process.cwd(), 'config.json'));


console.log('Talking to the mothership...');

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = util.exit;


// Parse the command for args and flags
program
	.option('-e, --environment <type>', 'If set to DEV, request goes to localhost.')
	.parse(process.argv);

// Set environment
var PORT = 3000;
var env = program.environment ? program.environment.toLowerCase() : '';
if (env === 'dev' || env === 'development') env = 'DEV';
else env = 'PROD';

if (env === 'DEV') {
	var HOST = 'localhost:' + PORT;
	var APP_URL = 'http://localhost:' + PORT + '/' + config.API_MAJOR_VERSION;
} else {
	var HOST = config.HOST;
	var APP_URL = 'https://' + HOST + '/' + config.API_MAJOR_VERSION;
}


// Create a new resource on the server
if (env === 'DEV' && projectConfig.dev_id && projectConfig.dev_id != null) {
	console.log('Hmm... config.json has a populated "dev_id" property.\nUse \'liab upload -e dev\' to update node or remove the Id to allow for creation of a new node.');
	util.exit();
} else if (env === 'PROD' && projectConfig.id && projectConfig.id != null){
	console.log('Hmm... config.json has a populated "id" property.\nUse \'liab upload\' to update node or remove the Id to allow for creation of a new node.');
	util.exit();
} else {
	createNode(function(status, body) {
		//TODO Turning into switch case statement.

		if (status === 500) {
			console.log('ERROR: Something went wrong. Please contact us at support@lightninginabot.com');
			util.exit();
		}

		if (status === 401){
			console.log("Warning: Unauthorized. Please check your auth token in .netrc");
			util.exit();
		}

		if (status === 200) {
			console.log('BEE BOP! Your node was created successfully. Now saving the node Id to your config file...');
			var nodeId = JSON.parse(body).id.toString();
			if (env === 'DEV') {
				projectConfig.dev_id = nodeId;
			} else {
				projectConfig.id = nodeId
			}

			// Save node id to local .env file
			return fs.writeFile(path.join(process.cwd(), 'config.json'), JSON.stringify(projectConfig, null, 2), function(err) {
				if (err) console.log(err);
				console.log('Success! Make sure to run the "upload" command to upload your node\'s code.');
				return 
			});
		}

		if (!util.exit.exited) {
			if(!program.args.length) {
		    program.help();
		  }
		}
	});
}



/**
 * Create a new resource on the server
 * Will fail if resource with given name already exists
 */
function createNode(cb) {
	// Get auth creds from netrc file
	var auth = netrc(HOST);
	request.post(APP_URL + '/nodes', {
	  'auth': { 'bearer': auth.password },
	  'form': { 'name' : pkg.name }
	}, function(err, res, body) {
		if (err) console.log(err);
		else return cb(res.statusCode, body);
	});
}
