#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var del = require('del');
var netrc = require('node-netrc');
var gulp = require('gulp');
var Config = require('../config');
var install = require('gulp-install');
var zip = require('gulp-zip');
var request = require('request');
var runSequence = require('run-sequence');
var path = require('path');
var pkg = require(path.join(process.cwd(), 'package.json'));
var util = require('../lib/utilities')


/**
 * Loads the environment vars as set in the projects .env file.
 * SITE_URL and SITE_DOMAIN in .env will override the default url.
 */
require('dotenv').config({ path: path.join(process.cwd(), '.env') });


var config = new Config();
var SITE_DOMAIN = process.env.SITE_DOMAIN ? process.env.SITE_DOMAIN : config.SITE_DOMAIN;
var SITE_URL = process.env.SITE_URL ? process.env.SITE_URL : config.SITE_URL;


gulp.task('clean', function(cb) {
	console.log('Cleaning dist files...');
  return del('./dist',
    del('./dist.zip', cb)
  );
});
 

gulp.task('js', function() {
	console.log('Creating new dist files...');
  return gulp.src('index.js')
    .pipe(gulp.dest('dist/'))
});
 

gulp.task('npm', function() {
	console.log('Installing dependencies...');
  return gulp.src('./package.json')
    .pipe(gulp.dest('./dist/'))
    .pipe(install({ production: true }));
});
 

gulp.task('zip', function() {
	console.log('Zipping dist files...');
  return gulp.src(['dist/**/*', '!dist/package.json', 'dist/.*'])
    .pipe(zip('dist.zip'))
    .pipe(gulp.dest('./'));
});
 

gulp.task('upload', function() {
	console.log('Uploading to Elf...');
	var data = {
		'deps' 			: Object.keys(pkg.dependencies),
		'index.js' 	: fs.createReadStream('./index.js')
	};
	if (pkg.description) { data.output_description = pkg.description; }
	var auth = netrc(SITE_DOMAIN);
	data[pkg.name + '.zip'] = fs.createReadStream('./dist.zip');
	return request({
		uri 			: SITE_URL + '/api/v1/i/' + pkg.name,
		method 		: 'PUT',
		formData 	: data,
		auth			: {
    	'user': auth.login,
    	'pass':  auth.password,
    	'sendImmediately': true
		}
	}, function (err, res, body) {
		if (err) { console.log(err); }
		console.log(JSON.parse(body).message);
	});
});


gulp.task('tasks', function(callback) {
  return runSequence(
    ['clean'],
    ['js', 'npm'],
    ['zip'],
    ['upload'],
    callback
  );
});


// Run the gulp tasks
gulp.start('tasks', function(err, res) {
	if (err) { console.log(err); } 
	else { console.log('Done.'); }
	util.exit(1);
});


if (!util.exit.exited) {
	if(!program.args.length) {
    program.help();
  }
}

