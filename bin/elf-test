#!/usr/bin/env node

var program 	= require('commander');
var fs 				=	require('fs');
var exec      = require('child_process').exec;
var path 			= require('path');
v

var _exit = process.exit;


// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit;


program
	// .option('-i, --input <value>', 'Run the test with the specified input value. If none supplied, will look for INPUT_VALUE in the .env file.')
  .option('-c, --client <type>', 'Run the test with the specified client type [api]')
  .parse(process.argv);


// Get the parsed args from the CLI input
var testValue = program.args[0];
var testClient = program.client;

if (!testClient) { testClient = 'api' }
if (!testValue) { 
	console.log('Please provide an input value to test. Wrap phrases in double-quotes. Type "elf" for help.'); 
	exit(1);
}


// Require the main interaction script
var script = require(process.cwd() + '/index.js');


// Setup the test data to pass into the interaction script
var testEvent = {
	value: testValue,
	client: testClient
}


var testContext = {
	done: function() {
		console.log('Done.');
	},

	succeed: function(res) {
		console.log('The test completed successfully!');
		console.log('Your interaction returned:\r\n');
		console.log(res);
		console.log('\r\nType "elf upload" when you\'re ready to upload your interaction to elf.');
	},

	error: function(err) {
		console.log(err);
	}
}


// Run the handler method of the interaction script
script.handler(testEvent, testContext);


if (!exit.exited) {
	if(!program.args.length) {
    program.help();
  }
}


/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}
